// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for Type.
const (
	Cooperative        Type = "Cooperative"
	Corporations       Type = "Corporations"
	NonProfit          Type = "NonProfit"
	SoleProprietorship Type = "Sole Proprietorship"
)

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Message string `json:"message"`
}

// CompanyName defines model for CompanyName.
type CompanyName = string

// CompanyUUID defines model for CompanyUUID.
type CompanyUUID = string

// Description defines model for Description.
type Description = string

// Error defines model for Error.
type Error struct {
	// Message Error message
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	EventDetails *EventDetails `json:"eventDetails,omitempty"`
	EventType    string        `json:"eventType"`
	Id           string        `json:"id"`
	Timestamp    *string       `json:"timestamp,omitempty"`
	UserName     string        `json:"userName"`
}

// EventDetails defines model for EventDetails.
type EventDetails struct {
	CompanyName    CompanyName    `json:"companyName"`
	CompanyUUID    CompanyUUID    `json:"companyUUID"`
	Description    *Description   `json:"description,omitempty"`
	Registered     Registered     `json:"registered"`
	TotalEmployees TotalEmployees `json:"totalEmployees"`
	Type           Type           `json:"type"`
}

// JwtResponse defines model for JwtResponse.
type JwtResponse struct {
	JwtToken string `json:"jwt_token"`
}

// Password defines model for Password.
type Password = string

// Registered defines model for Registered.
type Registered = bool

// TotalEmployees defines model for TotalEmployees.
type TotalEmployees = int

// UserName defines model for UserName.
type UserName = string

// Type defines model for type.
type Type string

// CompanyUUIDParam defines model for CompanyUUIDParam.
type CompanyUUIDParam = string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// CompanyListResponse defines model for CompanyListResponse.
type CompanyListResponse struct {
	Data []struct {
		CompanyName    CompanyName    `json:"companyName"`
		CompanyUUID    CompanyUUID    `json:"companyUUID"`
		Description    *Description   `json:"description,omitempty"`
		Registered     Registered     `json:"registered"`
		TotalEmployees TotalEmployees `json:"totalEmployees"`
		Type           Type           `json:"type"`
	} `json:"data"`
}

// Events defines model for Events.
type Events struct {
	Data *[]Event `json:"data,omitempty"`
}

// FailureResponse defines model for FailureResponse.
type FailureResponse = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// JwtSuccess defines model for JwtSuccess.
type JwtSuccess = JwtResponse

// Success defines model for Success.
type Success = ApiResponse

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	CompanyName    CompanyName    `json:"companyName"`
	CompanyUUID    CompanyUUID    `json:"companyUUID"`
	Description    *Description   `json:"description,omitempty"`
	Registered     Registered     `json:"registered"`
	TotalEmployees TotalEmployees `json:"totalEmployees"`
	Type           Type           `json:"type"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// CompanyRequestBody defines model for CompanyRequestBody.
type CompanyRequestBody = EventDetails

// SignUpBody defines model for SignUpBody.
type SignUpBody struct {
	Password Password `json:"password"`
	Username UserName `json:"username"`
}

// UpdatePayload defines model for UpdatePayload.
type UpdatePayload struct {
	CompanyName    CompanyName    `json:"companyName"`
	Description    *Description   `json:"description,omitempty"`
	Registered     Registered     `json:"registered"`
	TotalEmployees TotalEmployees `json:"totalEmployees"`
	Type           Type           `json:"type"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	Password Password `json:"password"`
	Username UserName `json:"username"`
}

// SignUpJSONBody defines parameters for SignUp.
type SignUpJSONBody struct {
	Password Password `json:"password"`
	Username UserName `json:"username"`
}

// UpdateCompanyDetailsJSONBody defines parameters for UpdateCompanyDetails.
type UpdateCompanyDetailsJSONBody struct {
	CompanyName    CompanyName    `json:"companyName"`
	Description    *Description   `json:"description,omitempty"`
	Registered     Registered     `json:"registered"`
	TotalEmployees TotalEmployees `json:"totalEmployees"`
	Type           Type           `json:"type"`
}

// CreateCompanyJSONBody defines parameters for CreateCompany.
type CreateCompanyJSONBody = EventDetails

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// SignUpJSONRequestBody defines body for SignUp for application/json ContentType.
type SignUpJSONRequestBody SignUpJSONBody

// UpdateCompanyDetailsJSONRequestBody defines body for UpdateCompanyDetails for application/json ContentType.
type UpdateCompanyDetailsJSONRequestBody UpdateCompanyDetailsJSONBody

// CreateCompanyJSONRequestBody defines body for CreateCompany for application/json ContentType.
type CreateCompanyJSONRequestBody = CreateCompanyJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/auth/login)
	Login(ctx echo.Context) error

	// (POST /v1/auth/signup)
	SignUp(ctx echo.Context) error

	// (DELETE /v1/company-details/{company_uuid})
	DeleteCompanyDetails(ctx echo.Context, companyUuid CompanyUUIDParam) error

	// (GET /v1/company-details/{company_uuid})
	GetCompanyDetails(ctx echo.Context, companyUuid CompanyUUIDParam) error

	// (PATCH /v1/company-details/{company_uuid})
	UpdateCompanyDetails(ctx echo.Context, companyUuid CompanyUUIDParam) error

	// (POST /v1/create-company)
	CreateCompany(ctx echo.Context) error

	// (GET /v1/list-companies)
	ListCompanies(ctx echo.Context) error

	// (GET /v1/list-events)
	ListEvents(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// SignUp converts echo context to params.
func (w *ServerInterfaceWrapper) SignUp(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SignUp(ctx)
	return err
}

// DeleteCompanyDetails converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCompanyDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_uuid" -------------
	var companyUuid CompanyUUIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "company_uuid", ctx.Param("company_uuid"), &companyUuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"things:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCompanyDetails(ctx, companyUuid)
	return err
}

// GetCompanyDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompanyDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_uuid" -------------
	var companyUuid CompanyUUIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "company_uuid", ctx.Param("company_uuid"), &companyUuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"things:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompanyDetails(ctx, companyUuid)
	return err
}

// UpdateCompanyDetails converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCompanyDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "company_uuid" -------------
	var companyUuid CompanyUUIDParam

	err = runtime.BindStyledParameterWithOptions("simple", "company_uuid", ctx.Param("company_uuid"), &companyUuid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter company_uuid: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{"things:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateCompanyDetails(ctx, companyUuid)
	return err
}

// CreateCompany converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCompany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"things:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCompany(ctx)
	return err
}

// ListCompanies converts echo context to params.
func (w *ServerInterfaceWrapper) ListCompanies(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"things:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCompanies(ctx)
	return err
}

// ListEvents converts echo context to params.
func (w *ServerInterfaceWrapper) ListEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{"things:w"})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListEvents(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/auth/login", wrapper.Login)
	router.POST(baseURL+"/v1/auth/signup", wrapper.SignUp)
	router.DELETE(baseURL+"/v1/company-details/:company_uuid", wrapper.DeleteCompanyDetails)
	router.GET(baseURL+"/v1/company-details/:company_uuid", wrapper.GetCompanyDetails)
	router.PATCH(baseURL+"/v1/company-details/:company_uuid", wrapper.UpdateCompanyDetails)
	router.POST(baseURL+"/v1/create-company", wrapper.CreateCompany)
	router.GET(baseURL+"/v1/list-companies", wrapper.ListCompanies)
	router.GET(baseURL+"/v1/list-events", wrapper.ListEvents)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaS2/buBP/KgT/f2Avap2024tvadIWKdLWSGLsoQgKRhrL7Eoklxw56zX03RekSJuy",
	"5Edeu1vUN4ucIWfmN5wH6QVNZamkAIGGDhdUMc1KQNDu61SWion5eHx+NrITdiwDk2qukEtBh4GCWBKa",
	"UG7HFMMpTahgJdChW5+J+beq4hlNqIY/Kq4ho0PUFSTUpFMomV0Y58rSG9Rc5LSu64YYDL6VGYdYoMvl",
	"+NyOplIgCLQ/mVIFT5mVbvDdWBEX0RasKL5M6PDrgv5fw4QO6f8GK/UHDZ0ZvJuBwDNAxgtD65tY5q9B",
	"Ha+v//psVU0oSmTFu1IVcg5gnLI5NwiWNWn0u0kocixgZbpYlyQYQd5+hxStEeqEXvFcjNW9lVVaKtDo",
	"LaeYMXdSZ/b3NuVHga5OaGVANyhu5xkb0M4EAbNgrOUCyWr/yAKRYv2aj1XGEEZsXkiWPUL5GKYdupxG",
	"pHXS9vbtnGcRad3Cfgfj5Yqy7jjRDt7rNnUd7Lidy9Gsg/UP+LLb0SgpTKPZW5Z5lnuBu/Xwai11Ez3a",
	"keoty0jYrE6CxBfc4KUX6REOljF0oxyhNE/pf3G42Y/Tkf6UnvuYmNx21eUA05rNO/s5tG96HHzd56x3",
	"ES8PyUJGSajLMOYp/W1nPutVaqcCJ6SwKsgJAbsIaSidDu8ZLyoNDzo8DzrA5wJtNinIFegZaOIJE/pe",
	"6lueZSCeX4brKRCb1IiQSKZsxkVOcApEQArGMD0nCnTJjeFSGDKRmjCiwchKp0CkJgIgszxMEJamshLO",
	"tkaWQIzUmFgahgilQkdGlJZTfssRMsLScEA/3uFVldodn0zjj3erMNij9xcF2i1L7pghptl8UhVWmqcW",
	"5UTxR4ryBAH9ELF/rIjd9ZPQmfhCnnjfICvfSuhYsAqnUvO/IHv+4BHvRnQoRerQAzn7x87fccrSxpgc",
	"+pqltnkDYVShxQv35LvTtr+X7M8LEDlO6fD4TbK+WxI3hk6adhnoYe1wnbUdPNrk9dFRD31jyW1maBvY",
	"0ZMwnexrpJCQuztB3AkO79M1Jg3vtT8gHdV41juMvASDrFS9s1Xos3Y6gGu1VxJErH3Fzrs1NQ+h8Mcu",
	"XuNk3oHz+x1+Q/l7Uy1t96IVaRRI4sV79h5F9wwdB75sgeOnb6UsgDnwrjsgZDBhVYF0uIoPXCDk4Cq/",
	"8eYDsUIERFVabU6lVrIpHawpP0sx0nLCkdpwJpuqYmZ1upIFkJGWSnNAqc2Uq8jMka0MpJXmOL+y+PqO",
	"FpgGfVLZoLagt+7rvdQlQ2u6366pj/ZOcTe7MuIUUTV5g4uJ7Ia3C1+Kn4zOf7GVj1JS28LQlpmhydCQ",
	"Sp2RUw1OURq16JfjM/KChLT4iadaGtAznoIhH2TBRE4TOgNtmt2OXx69PLJ2lAoEU5wO6Ws3lLgLPqft",
	"YHY8sDltUMicO4dSsunl1yS3007OUw2Ztb4MVdx5FuZpfN8333SWWleCg+gGaf1u4dXR0eY1PN0gqqTr",
	"hP66D0t0Z+FYjneztMoMx/R6N9Oqq6kT+mYfydY7MtfhsdxY57ceCQJ9RUNv7NwSPcNzUanN8DVW3oJf",
	"Q/BvABih92ofKH5utH2UeOGvIgaL+HK+boAvAHtKqzM3TtaL6ts5Oc867tAQe9pQVyStt4UNV/ArkkHn",
	"7aG5iT+c8DXMQxJyNo3Tz1eKUy5yM7yjN9Z2wTkChjYhuOI3h54z/wFwT7Q/AP43oF7v/g949+OtGKbT",
	"LuLNY8ueoDfEz4P7PVNI+5HoUAY8h9OE/GHLSnjhs8bmgsGVnx1X6jhRQ+apHlI99Dw7PbaKOIC/CfyC",
	"G/TQ+1ayN3G4LuWkKJboZxvQt4Sny+UeAlvfG94Bwl0QwvLxaTN+rChI80hFJlqW5FOFoZ/sguhfsx6C",
	"oGc9gOZAu5C5t7qFbOsKMd8i/NXGtfgno3Na39R/BwAA///vRpbz2SMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
